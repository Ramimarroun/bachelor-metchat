[{"/Users/eier/Library/Mobile Documents/com~apple~CloudDocs/Documents/Dataingeniør/DATA3900 Bacheloroppgave/bachelor-metchat/client/src/index.js":"1","/Users/eier/Library/Mobile Documents/com~apple~CloudDocs/Documents/Dataingeniør/DATA3900 Bacheloroppgave/bachelor-metchat/client/src/App.js":"2","/Users/eier/Library/Mobile Documents/com~apple~CloudDocs/Documents/Dataingeniør/DATA3900 Bacheloroppgave/bachelor-metchat/client/src/app/account-context.js":"3","/Users/eier/Library/Mobile Documents/com~apple~CloudDocs/Documents/Dataingeniør/DATA3900 Bacheloroppgave/bachelor-metchat/client/src/app/theme-context.js":"4","/Users/eier/Library/Mobile Documents/com~apple~CloudDocs/Documents/Dataingeniør/DATA3900 Bacheloroppgave/bachelor-metchat/client/src/api/account-api.js":"5","/Users/eier/Library/Mobile Documents/com~apple~CloudDocs/Documents/Dataingeniør/DATA3900 Bacheloroppgave/bachelor-metchat/client/src/api/api.js":"6","/Users/eier/Library/Mobile Documents/com~apple~CloudDocs/Documents/Dataingeniør/DATA3900 Bacheloroppgave/bachelor-metchat/client/src/shared/protected.jsx":"7","/Users/eier/Library/Mobile Documents/com~apple~CloudDocs/Documents/Dataingeniør/DATA3900 Bacheloroppgave/bachelor-metchat/client/src/shared/not-found.jsx":"8","/Users/eier/Library/Mobile Documents/com~apple~CloudDocs/Documents/Dataingeniør/DATA3900 Bacheloroppgave/bachelor-metchat/client/src/shared/public-layout.jsx":"9","/Users/eier/Library/Mobile Documents/com~apple~CloudDocs/Documents/Dataingeniør/DATA3900 Bacheloroppgave/bachelor-metchat/client/src/admin/Conversations.jsx":"10","/Users/eier/Library/Mobile Documents/com~apple~CloudDocs/Documents/Dataingeniør/DATA3900 Bacheloroppgave/bachelor-metchat/client/src/admin/Users.jsx":"11","/Users/eier/Library/Mobile Documents/com~apple~CloudDocs/Documents/Dataingeniør/DATA3900 Bacheloroppgave/bachelor-metchat/client/src/main/Contacts.jsx":"12","/Users/eier/Library/Mobile Documents/com~apple~CloudDocs/Documents/Dataingeniør/DATA3900 Bacheloroppgave/bachelor-metchat/client/src/main/Welcome.jsx":"13","/Users/eier/Library/Mobile Documents/com~apple~CloudDocs/Documents/Dataingeniør/DATA3900 Bacheloroppgave/bachelor-metchat/client/src/main/MoreInfo.jsx":"14","/Users/eier/Library/Mobile Documents/com~apple~CloudDocs/Documents/Dataingeniør/DATA3900 Bacheloroppgave/bachelor-metchat/client/src/main/Profile.jsx":"15","/Users/eier/Library/Mobile Documents/com~apple~CloudDocs/Documents/Dataingeniør/DATA3900 Bacheloroppgave/bachelor-metchat/client/src/main/about.jsx":"16","/Users/eier/Library/Mobile Documents/com~apple~CloudDocs/Documents/Dataingeniør/DATA3900 Bacheloroppgave/bachelor-metchat/client/src/main/chats.jsx":"17","/Users/eier/Library/Mobile Documents/com~apple~CloudDocs/Documents/Dataingeniør/DATA3900 Bacheloroppgave/bachelor-metchat/client/src/main/interests.jsx":"18","/Users/eier/Library/Mobile Documents/com~apple~CloudDocs/Documents/Dataingeniør/DATA3900 Bacheloroppgave/bachelor-metchat/client/src/api/config.js":"19","/Users/eier/Library/Mobile Documents/com~apple~CloudDocs/Documents/Dataingeniør/DATA3900 Bacheloroppgave/bachelor-metchat/client/src/APIRoutes.js":"20","/Users/eier/Library/Mobile Documents/com~apple~CloudDocs/Documents/Dataingeniør/DATA3900 Bacheloroppgave/bachelor-metchat/client/src/api/contact-api.js":"21","/Users/eier/Library/Mobile Documents/com~apple~CloudDocs/Documents/Dataingeniør/DATA3900 Bacheloroppgave/bachelor-metchat/client/src/api/profile-api.js":"22","/Users/eier/Library/Mobile Documents/com~apple~CloudDocs/Documents/Dataingeniør/DATA3900 Bacheloroppgave/bachelor-metchat/client/src/api/user-interest-api.js":"23","/Users/eier/Library/Mobile Documents/com~apple~CloudDocs/Documents/Dataingeniør/DATA3900 Bacheloroppgave/bachelor-metchat/client/src/api/conversation-api.js":"24","/Users/eier/Library/Mobile Documents/com~apple~CloudDocs/Documents/Dataingeniør/DATA3900 Bacheloroppgave/bachelor-metchat/client/src/api/message-api.js":"25","/Users/eier/Library/Mobile Documents/com~apple~CloudDocs/Documents/Dataingeniør/DATA3900 Bacheloroppgave/bachelor-metchat/client/src/components/Flex.tsx":"26","/Users/eier/Library/Mobile Documents/com~apple~CloudDocs/Documents/Dataingeniør/DATA3900 Bacheloroppgave/bachelor-metchat/client/src/components/logo.js":"27","/Users/eier/Library/Mobile Documents/com~apple~CloudDocs/Documents/Dataingeniør/DATA3900 Bacheloroppgave/bachelor-metchat/client/src/main/chat/WebSocketClient.js":"28","/Users/eier/Library/Mobile Documents/com~apple~CloudDocs/Documents/Dataingeniør/DATA3900 Bacheloroppgave/bachelor-metchat/client/src/components/AdminNav.jsx":"29","/Users/eier/Library/Mobile Documents/com~apple~CloudDocs/Documents/Dataingeniør/DATA3900 Bacheloroppgave/bachelor-metchat/client/src/components/contact.jsx":"30","/Users/eier/Library/Mobile Documents/com~apple~CloudDocs/Documents/Dataingeniør/DATA3900 Bacheloroppgave/bachelor-metchat/client/src/assets/icons/ArrowBack.tsx":"31","/Users/eier/Library/Mobile Documents/com~apple~CloudDocs/Documents/Dataingeniør/DATA3900 Bacheloroppgave/bachelor-metchat/client/src/components/MainNav.jsx":"32","/Users/eier/Library/Mobile Documents/com~apple~CloudDocs/Documents/Dataingeniør/DATA3900 Bacheloroppgave/bachelor-metchat/client/src/assets/icons/AddComment.tsx":"33","/Users/eier/Library/Mobile Documents/com~apple~CloudDocs/Documents/Dataingeniør/DATA3900 Bacheloroppgave/bachelor-metchat/client/src/components/Register.jsx":"34","/Users/eier/Library/Mobile Documents/com~apple~CloudDocs/Documents/Dataingeniør/DATA3900 Bacheloroppgave/bachelor-metchat/client/src/components/login.jsx":"35","/Users/eier/Library/Mobile Documents/com~apple~CloudDocs/Documents/Dataingeniør/DATA3900 Bacheloroppgave/bachelor-metchat/client/src/components/loading.jsx":"36","/Users/eier/Library/Mobile Documents/com~apple~CloudDocs/Documents/Dataingeniør/DATA3900 Bacheloroppgave/bachelor-metchat/client/src/components/nav.jsx":"37","/Users/eier/Library/Mobile Documents/com~apple~CloudDocs/Documents/Dataingeniør/DATA3900 Bacheloroppgave/bachelor-metchat/client/src/components/use-query.jsx":"38","/Users/eier/Library/Mobile Documents/com~apple~CloudDocs/Documents/Dataingeniør/DATA3900 Bacheloroppgave/bachelor-metchat/client/src/components/interesser.jsx":"39","/Users/eier/Library/Mobile Documents/com~apple~CloudDocs/Documents/Dataingeniør/DATA3900 Bacheloroppgave/bachelor-metchat/client/src/components/conversations.jsx":"40","/Users/eier/Library/Mobile Documents/com~apple~CloudDocs/Documents/Dataingeniør/DATA3900 Bacheloroppgave/bachelor-metchat/client/src/assets/icons/Delete.jsx":"41","/Users/eier/Library/Mobile Documents/com~apple~CloudDocs/Documents/Dataingeniør/DATA3900 Bacheloroppgave/bachelor-metchat/client/src/assets/icons/Profile.jsx":"42","/Users/eier/Library/Mobile Documents/com~apple~CloudDocs/Documents/Dataingeniør/DATA3900 Bacheloroppgave/bachelor-metchat/client/src/assets/img/avatars/index.js":"43","/Users/eier/Library/Mobile Documents/com~apple~CloudDocs/Documents/Dataingeniør/DATA3900 Bacheloroppgave/bachelor-metchat/client/src/components/footer.jsx":"44"},{"size":371,"mtime":1684329094030,"results":"45","hashOfConfig":"46"},{"size":2508,"mtime":1684589818185,"results":"47","hashOfConfig":"46"},{"size":3859,"mtime":1684589014784,"results":"48","hashOfConfig":"46"},{"size":1473,"mtime":1684329093915,"results":"49","hashOfConfig":"46"},{"size":712,"mtime":1684329093900,"results":"50","hashOfConfig":"46"},{"size":409,"mtime":1684329093902,"results":"51","hashOfConfig":"46"},{"size":2378,"mtime":1684590111141,"results":"52","hashOfConfig":"46"},{"size":531,"mtime":1684329094071,"results":"53","hashOfConfig":"46"},{"size":337,"mtime":1684589834936,"results":"54","hashOfConfig":"46"},{"size":10489,"mtime":1684589818191,"results":"55","hashOfConfig":"46"},{"size":3819,"mtime":1684583628889,"results":"56","hashOfConfig":"46"},{"size":7356,"mtime":1684589014807,"results":"57","hashOfConfig":"46"},{"size":2399,"mtime":1684590081841,"results":"58","hashOfConfig":"46"},{"size":3518,"mtime":1684590304919,"results":"59","hashOfConfig":"46"},{"size":8364,"mtime":1684590377102,"results":"60","hashOfConfig":"46"},{"size":476,"mtime":1684589834935,"results":"61","hashOfConfig":"46"},{"size":26328,"mtime":1684589988703,"results":"62","hashOfConfig":"46"},{"size":4773,"mtime":1684590017323,"results":"63","hashOfConfig":"46"},{"size":434,"mtime":1684329093905,"results":"64","hashOfConfig":"46"},{"size":460,"mtime":1684583628882,"results":"65","hashOfConfig":"46"},{"size":482,"mtime":1684329093906,"results":"66","hashOfConfig":"46"},{"size":385,"mtime":1684329093910,"results":"67","hashOfConfig":"46"},{"size":294,"mtime":1684329093910,"results":"68","hashOfConfig":"46"},{"size":384,"mtime":1684329093907,"results":"69","hashOfConfig":"46"},{"size":373,"mtime":1684500668402,"results":"70","hashOfConfig":"46"},{"size":699,"mtime":1684589834924,"results":"71","hashOfConfig":"46"},{"size":215,"mtime":1684329094029,"results":"72","hashOfConfig":"46"},{"size":463,"mtime":1684589014812,"results":"73","hashOfConfig":"46"},{"size":1801,"mtime":1683806616733,"results":"74","hashOfConfig":"46"},{"size":5027,"mtime":1684589929409,"results":"75","hashOfConfig":"46"},{"size":427,"mtime":1684329093926,"results":"76","hashOfConfig":"46"},{"size":1471,"mtime":1684589950385,"results":"77","hashOfConfig":"46"},{"size":647,"mtime":1684329093925,"results":"78","hashOfConfig":"46"},{"size":7096,"mtime":1684589834925,"results":"79","hashOfConfig":"46"},{"size":2392,"mtime":1684589834930,"results":"80","hashOfConfig":"46"},{"size":275,"mtime":1684329094026,"results":"81","hashOfConfig":"46"},{"size":880,"mtime":1684589834934,"results":"82","hashOfConfig":"46"},{"size":221,"mtime":1684329094030,"results":"83","hashOfConfig":"46"},{"size":412,"mtime":1684329094026,"results":"84","hashOfConfig":"46"},{"size":634,"mtime":1684589014804,"results":"85","hashOfConfig":"46"},{"size":535,"mtime":1684329093926,"results":"86","hashOfConfig":"46"},{"size":767,"mtime":1684329093927,"results":"87","hashOfConfig":"46"},{"size":814,"mtime":1684329093934,"results":"88","hashOfConfig":"46"},{"size":235,"mtime":1684589834928,"results":"89","hashOfConfig":"46"},{"filePath":"90","messages":"91","suppressedMessages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"12ymk3a",{"filePath":"93","messages":"94","suppressedMessages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","suppressedMessages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"99","messages":"100","suppressedMessages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"102","messages":"103","suppressedMessages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","suppressedMessages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"108","messages":"109","suppressedMessages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"111","messages":"112","suppressedMessages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","suppressedMessages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"117","messages":"118","suppressedMessages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"120","messages":"121","suppressedMessages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"123","messages":"124","suppressedMessages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"126","messages":"127","suppressedMessages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"129","messages":"130","suppressedMessages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"132","messages":"133","suppressedMessages":"134","errorCount":1,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"135","messages":"136","suppressedMessages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"138","messages":"139","suppressedMessages":"140","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"142"},{"filePath":"143","messages":"144","suppressedMessages":"145","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"146","messages":"147","suppressedMessages":"148","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"149","messages":"150","suppressedMessages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"152","messages":"153","suppressedMessages":"154","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"155","messages":"156","suppressedMessages":"157","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"158","messages":"159","suppressedMessages":"160","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"161","messages":"162","suppressedMessages":"163","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"164","messages":"165","suppressedMessages":"166","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"167","messages":"168","suppressedMessages":"169","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"170","messages":"171","suppressedMessages":"172","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"173","messages":"174","suppressedMessages":"175","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"176","messages":"177","suppressedMessages":"178","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"179","messages":"180","suppressedMessages":"181","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"182","messages":"183","suppressedMessages":"184","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"185","messages":"186","suppressedMessages":"187","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"188","messages":"189","suppressedMessages":"190","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"191","messages":"192","suppressedMessages":"193","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"194","messages":"195","suppressedMessages":"196","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"197","messages":"198","suppressedMessages":"199","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"200","messages":"201","suppressedMessages":"202","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"203","messages":"204","suppressedMessages":"205","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"206","messages":"207","suppressedMessages":"208","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"209","messages":"210","suppressedMessages":"211","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"212","messages":"213","suppressedMessages":"214","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"215","messages":"216","suppressedMessages":"217","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"218","messages":"219","suppressedMessages":"220","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"221","messages":"222","suppressedMessages":"223","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/eier/Library/Mobile Documents/com~apple~CloudDocs/Documents/Dataingeniør/DATA3900 Bacheloroppgave/bachelor-metchat/client/src/index.js",[],[],"/Users/eier/Library/Mobile Documents/com~apple~CloudDocs/Documents/Dataingeniør/DATA3900 Bacheloroppgave/bachelor-metchat/client/src/App.js",[],[],"/Users/eier/Library/Mobile Documents/com~apple~CloudDocs/Documents/Dataingeniør/DATA3900 Bacheloroppgave/bachelor-metchat/client/src/app/account-context.js",["224"],[],"/Users/eier/Library/Mobile Documents/com~apple~CloudDocs/Documents/Dataingeniør/DATA3900 Bacheloroppgave/bachelor-metchat/client/src/app/theme-context.js",["225","226","227","228","229","230","231","232","233","234"],[],"/Users/eier/Library/Mobile Documents/com~apple~CloudDocs/Documents/Dataingeniør/DATA3900 Bacheloroppgave/bachelor-metchat/client/src/api/account-api.js",[],[],"/Users/eier/Library/Mobile Documents/com~apple~CloudDocs/Documents/Dataingeniør/DATA3900 Bacheloroppgave/bachelor-metchat/client/src/api/api.js",[],[],"/Users/eier/Library/Mobile Documents/com~apple~CloudDocs/Documents/Dataingeniør/DATA3900 Bacheloroppgave/bachelor-metchat/client/src/shared/protected.jsx",["235"],[],"/Users/eier/Library/Mobile Documents/com~apple~CloudDocs/Documents/Dataingeniør/DATA3900 Bacheloroppgave/bachelor-metchat/client/src/shared/not-found.jsx",[],[],"/Users/eier/Library/Mobile Documents/com~apple~CloudDocs/Documents/Dataingeniør/DATA3900 Bacheloroppgave/bachelor-metchat/client/src/shared/public-layout.jsx",["236"],[],"/Users/eier/Library/Mobile Documents/com~apple~CloudDocs/Documents/Dataingeniør/DATA3900 Bacheloroppgave/bachelor-metchat/client/src/admin/Conversations.jsx",[],[],"/Users/eier/Library/Mobile Documents/com~apple~CloudDocs/Documents/Dataingeniør/DATA3900 Bacheloroppgave/bachelor-metchat/client/src/admin/Users.jsx",[],[],"/Users/eier/Library/Mobile Documents/com~apple~CloudDocs/Documents/Dataingeniør/DATA3900 Bacheloroppgave/bachelor-metchat/client/src/main/Contacts.jsx",["237"],[],"/Users/eier/Library/Mobile Documents/com~apple~CloudDocs/Documents/Dataingeniør/DATA3900 Bacheloroppgave/bachelor-metchat/client/src/main/Welcome.jsx",["238","239","240","241","242"],[],"/Users/eier/Library/Mobile Documents/com~apple~CloudDocs/Documents/Dataingeniør/DATA3900 Bacheloroppgave/bachelor-metchat/client/src/main/MoreInfo.jsx",["243","244","245","246"],[],"/Users/eier/Library/Mobile Documents/com~apple~CloudDocs/Documents/Dataingeniør/DATA3900 Bacheloroppgave/bachelor-metchat/client/src/main/Profile.jsx",["247","248","249"],[],"/Users/eier/Library/Mobile Documents/com~apple~CloudDocs/Documents/Dataingeniør/DATA3900 Bacheloroppgave/bachelor-metchat/client/src/main/about.jsx",[],[],"/Users/eier/Library/Mobile Documents/com~apple~CloudDocs/Documents/Dataingeniør/DATA3900 Bacheloroppgave/bachelor-metchat/client/src/main/chats.jsx",["250"],[],"import classNames from \"classnames\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { Modal, ModalHeader, ModalTitle } from \"react-bootstrap\";\nimport { IoMdSend } from \"react-icons/io\";\nimport { Link } from \"react-router-dom\";\nimport { apiConfig } from \"../api/config\";\nimport { conversationApi } from \"../api/conversation-api\";\nimport { messageApi } from \"../api/message-api\";\nimport { useAccount } from \"../app/account-context\";\nimport DeleteSVG from \"../assets/icons/Delete\";\nimport ProfileSVG from \"../assets/icons/Profile\";\nimport { Flex } from \"../components/Flex\";\nimport Nav from \"../components/MainNav\";\nimport { Contact } from \"../components/contact\";\nimport { Conversations } from \"../components/conversations\";\nimport { Loading } from \"../components/loading\";\nimport { useQuery } from \"../components/use-query\";\nimport { WebSocketClient } from \"./chat/WebSocketClient\";\nimport ArrowBackSVG from \"../assets/icons/ArrowBack\";\nimport AddCommentSVG from \"../assets/icons/AddComment\";\nimport { useScreenSize } from \"../app/theme-context\";\n\nexport const Chats = () => {\n  const account = useAccount();\n\n  const screen = useScreenSize();\n  const isMobile = screen.isMobile;\n\n  const q = useQuery();\n  const contactId = q.get(\"contactId\") ?? null;\n  const [isConnected, setIsConnected] = useState(false);\n  const [model, setModel] = useState({\n    init: false,\n    currentContact: contactId,\n    message: \"\",\n    recipientId: contactId,\n    conversation: null,\n    conversations: [],\n    viewConversations: false,\n  });\n\n  const [messages, setMessages] = useState([]);\n  const messagesEndRef = useRef(null);\n  const conversationsRef = useRef();\n  const contactsRef = useRef();\n\n  const onConnected = (status) => setIsConnected(status);\n\n  const receiveMessage = (message) => {\n    setMessages((prevMessages) => [...prevMessages, message]);\n  };\n\n  const webSocket = WebSocketClient(\n    apiConfig.chatUrl,\n    receiveMessage,\n    onConnected\n  );\n\n  const sendMessage = () => {\n    if (!model.message) return;\n\n    const msg = {\n      message: model.message,\n      toId: contactId ?? model.currentContact._id,\n      fromId: account.userId,\n      conversationId: model.conversation._id,\n    };\n\n    webSocket.sendMessage(msg);\n\n    messageApi\n      .send(msg)\n      .then(({ data }) => {\n        setModel({ ...model, message: \"\" });\n\n        setMessages((prevMessages) => [...prevMessages, JSON.stringify(msg)]);\n      })\n      .catch(() => alert(\"error\"));\n  };\n\n  function handleKeyDown(event) {\n    if (event.key === \"Enter\") {\n      sendMessage();\n    }\n  }\n\n  useEffect(() => {\n    init();\n  }, [contactId]);\n\n  const init = () => {\n    messageApi\n      .init({ contactId: contactId ?? \"\" })\n      .then(({ data }) => {\n        setModel({\n          ...model,\n          currentContact: data.contact,\n          conversations: data.conversations,\n          contacts: data.contacts,\n          init: true,\n          viewConversations: contactId ? true : false,\n        });\n        conversationsRef.current = data.conversations;\n        contactsRef.current = data.contacts;\n      })\n      .catch(() => alert(\"error\"));\n  };\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({\n      behavior: \"smooth\",\n      block: \"end\",\n    });\n  };\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  if (!model.init) return <Loading />;\n  return (\n    <>\n      <Nav />\n      <Flex\n        content=\"space-between \"\n        className=\"position-relative\"\n        vertical={isMobile}\n        style={{\n          height: \"100%\",\n          overflow: \"hidden\",\n          paddingTop: \"15px\",\n        }}\n      >\n        {!model.conversation && (\n          <ChatConversations\n            model={model}\n            setModel={setModel}\n            conversationsRef={conversationsRef}\n            contactsRef={contactsRef}\n            setMessages={setMessages}\n          />\n        )}\n\n        <div className=\"flex-grow-1\">\n          {model.conversation?._id && (\n            <>\n              <Flex align=\"center\" className=\"px-4 border-bottom pb-2\">\n                <button\n                  className=\"btn bnt-default \"\n                  onClick={() =>\n                    setModel({\n                      ...model,\n\n                      conversation: null,\n                    })\n                  }\n                >\n                  <ArrowBackSVG\n                    className=\"text-muted\"\n                    style={{\n                      width: 24,\n                      height: 24,\n                    }}\n                  />\n                </button>\n                {isMobile && (\n                  <>\n                    <Contact\n                      contact={{\n                        ...model?.currentContact,\n                        name:\n                          model.currentContact?.firstName +\n                          \" \" +\n                          model.currentContact?.lastName,\n                      }}\n                      inContact\n                      isInMyContacts\n                      showEmail={false}\n                      className=\"ms-3\"\n                      mb=\"mb-0\"\n                    />\n                  </>\n                )}\n                <Flex align=\"center\" content=\"center\" className=\"ms-3 \">\n                  <span\n                    className={classNames(\"status\", {\n                      connected: isConnected,\n                      disConnected: !isConnected,\n                    })}\n                  ></span>\n                  <h5 className=\"m-0 me-3\">{model.conversation.title}</h5>\n                </Flex>\n              </Flex>\n              <Flex vertical content=\"space-between\">\n                <div className=\"p-3\">\n                  <div\n                    className=\"message-container chat triangle-clip\"\n                    style={{\n                      minHeight: 200,\n                    }}\n                  >\n                    {messages?.map((x, index) => {\n                      const message = JSON.parse(x);\n                      console.log(\n                        \"message.toId\",\n                        message.toId === account.userId\n                      );\n                      console.log(\n                        \"message.fromId\",\n                        message.fromId === account.userId\n                      );\n                      console.log(\n                        \"message.curentContact\",\n                        message.fromId === model.currentContact._id\n                      );\n\n                      console.log(\"account.userId\", account.userId);\n                      console.log(\"toId\", message.toId);\n                      console.log(\"fromId\", message.fromId);\n                      console.log(\"curentContact\", model.currentContact._id);\n                      return (\n                        <div\n                          key={index}\n                          className={classNames(\"message \", {\n                            \"sent rounded-start rounded-bottom\":\n                              message.fromId === account.userId,\n                            \"received rounded-end rounded-bottom\":\n                              message.fromId !== account.userId,\n                          })}\n                        >\n                          <span>{message.message}</span>\n                        </div>\n                      );\n                    })}\n                    <div\n                      ref={messagesEndRef}\n                      style={{\n                        float: \"left\",\n                        clear: \"both\",\n                      }}\n                    />\n                  </div>\n                </div>\n                <Flex align=\"center\" className=\"w-100\">\n                  <div className=\"input-container m-3\">\n                    <input\n                      type=\"text\"\n                      placeholder=\"Skriv noe her...\"\n                      style={{\n                        margin: \"0px\",\n                        border: 0,\n                      }}\n                      onChange={(e) =>\n                        setModel({\n                          ...model,\n                          message: e.target.value,\n                        })\n                      }\n                      value={model.message}\n                      onKeyDown={handleKeyDown}\n                    />\n                    <button onClick={sendMessage}>\n                      <IoMdSend />\n                    </button>\n                  </div>\n                </Flex>\n              </Flex>\n            </>\n          )}\n          {!model.conversation?._id && (\n            <div className=\"text-center p-5\">\n              Select a conversation to start chat\n            </div>\n          )}\n        </div>\n                      console.log(\"account.userId\", account.userId);\n                      console.log(\"toId\", message.toId);\n                      console.log(\"fromId\", message.fromId);\n                      console.log(\"curentContact\", model.currentContact._id);\n                      return (\n                        <div\n                          key={index}\n                          className={classNames(\"message \", {\n                            \"sent rounded-start rounded-bottom\":\n                              message.fromId === account.userId,\n                            \"received rounded-end rounded-bottom\":\n                              message.fromId !== account.userId,\n                          })}\n                        >\n                          <span>{message.message}</span>\n                        </div>\n                      );\n                    })}\n                    <div\n                      ref={messagesEndRef}\n                      style={{\n                        float: \"left\",\n                        clear: \"both\",\n                      }}\n                    />\n                  </div>\n                </div>\n                <Flex align=\"center\" className=\"w-100\">\n                  <div className=\"input-container m-3\">\n                    <input\n                      type=\"text\"\n                      placeholder=\"Skriv noe her...\"\n                      style={{\n                        margin: \"0px\",\n                        border: 0,\n                      }}\n                      onChange={(e) =>\n                        setModel({\n                          ...model,\n                          message: e.target.value,\n                        })\n                      }\n                      value={model.message}\n                      onKeyDown={handleKeyDown}\n                    />\n                    <button onClick={sendMessage}>\n                      <IoMdSend />\n                    </button>\n                  </div>\n                </Flex>\n              </Flex>\n            </>\n          )}\n          {!model.conversation?._id && (\n            <div className=\"text-center p-5\">\n              Velg en samtale for å starte chat\n            </div>\n          )}\n        </div>\n\n        {model.currentContact && (\n          <div\n            className=\"border-start p-3 text-center d-none d-lg-block\"\n            style={{ minWidth: 350 }}\n          >\n            <Contact\n              width={200}\n              height={200}\n              contact={{\n                ...model.currentContact,\n                name:\n                  model.currentContact.firstName +\n                  \" \" +\n                  model.currentContact.lastName,\n              }}\n              inContact\n              justifyContent=\"center\"\n              textInBottom\n            />\n\n            <Flex content=\"space-between\" className=\"w-100 px-4\">\n              <Flex align=\"center\" vertical className=\"mt-4\">\n                <ProfileSVG />\n                <Link to={`/profil?contactId=${contactId}`}>Profil</Link>\n              </Flex>\n              {model.conversation && (\n                <Flex\n                  align=\"center\"\n                  vertical\n                  className=\"mt-4\"\n                  content=\"space-between\"\n                >\n                  <DeleteSVG />\n                  <span\n                    className=\"cur-p\"\n                    onClick={() =>\n                      conversationApi\n                        .delete(model.conversation?._id)\n                        .then(({ data }) => {\n                          setModel({\n                            ...model,\n                            conversation: null,\n                            conversations: model.conversations.filter(\n                              (x) => x._id !== model.conversation._id\n                            ),\n                          });\n                        })\n                        .catch(() => alert(\"error\"))\n                    }\n                  >\n                    Slett\n                  </span>\n                </Flex>\n              )}\n            </Flex>\n          </div>\n        )}\n      </Flex>\n      {model.currentContact && (\n        <SelectConversations\n          show={model.conversationsModal}\n          onHide={() => setModel({ ...model, conversationsModal: false })}\n          model={model}\n          setModel={setModel}\n          contactId={contactId ?? model.currentContact._id}\n          setMessages={setMessages}\n        />\n      )}\n    </>\n  );\n};\n\nconst SelectConversations = ({\n  show,\n  onHide,\n  model,\n  contactId,\n  setModel,\n  setMessages,\n}) => {\n  const screen = useScreenSize();\n  const isMobile = screen.isMobile;\n  const addConversation = () => {\n    conversationApi\n      .add({ toUserId: contactId, title: model.conversationTitle })\n      .then(({ data }) => {\n        setModel({\n          ...model,\n          conversations: data.isExist\n            ? model.conversations\n            : data.conversations,\n          conversation: data.conversation,\n          conversationsModal: false,\n        });\n        setMessages([]);\n      })\n      .catch(() => alert(\"error\"));\n  };\n  return (\n    <Modal show={show} onHide={onHide} size=\"lg\">\n      <ModalHeader closeButton>\n        <ModalTitle style={{ fontSize: isMobile ? 20 : 40 }}>\n          Conversations with [\n          {model.currentContact.firstName + \" \" + model.currentContact.lastName}\n          ]\n        </ModalTitle>\n      </ModalHeader>\n      <Modal.Body className=\"p-0 mb-4\">\n        <Flex\n          className=\"mx-3 my-2\"\n          align=\"center\"\n          vertical={isMobile}\n          content=\"center\"\n        >\n          <input\n            placeholder=\"enter conversation title here...\"\n            className=\"form-control\"\n            style={{ maxWidth: 400 }}\n            value={model.conversationTitle}\n            onChange={(e) =>\n              setModel({\n                ...model,\n                conversationTitle: e.target.value,\n              })\n            }\n          />\n          <button\n            className={classNames(\"btn btn-dark\", {\n              \"ms-3\": !isMobile,\n              \"ms-0 mt-2\": isMobile,\n            })}\n            onClick={addConversation}\n          >\n            Create New Conversation\n          </button>\n        </Flex>\n      </Modal.Body>\n    </Modal>\n  );\nconst SelectConversations = ({\n  show,\n  onHide,\n  model,\n  contactId,\n  setModel,\n  setMessages,\n}) => {\n  const screen = useScreenSize();\n  const isMobile = screen.isMobile;\n  const addConversation = () => {\n    conversationApi\n      .add({ toUserId: contactId, title: model.conversationTitle })\n      .then(({ data }) => {\n        setModel({\n          ...model,\n          conversations: data.isExist\n            ? model.conversations\n            : data.conversations,\n          conversation: data.conversation,\n          conversationsModal: false,\n        });\n        setMessages([]);\n      })\n      .catch(() => alert(\"error\"));\n  };\n  return (\n    <Modal show={show} onHide={onHide} size=\"lg\">\n      <ModalHeader closeButton>\n        <ModalTitle style={{ fontSize: isMobile ? 20 : 40 }}>\n          Samtaler med [\n          {model.currentContact.firstName + \" \" + model.currentContact.lastName}\n          ]\n        </ModalTitle>\n      </ModalHeader>\n      <Modal.Body className=\"p-0 mb-4\">\n        <Flex\n          className=\"mx-3 my-2\"\n          align=\"center\"\n          vertical={isMobile}\n          content=\"center\"\n        >\n          <input\n            placeholder=\"Skriv en tittel...\"\n            className=\"form-control\"\n            style={{ maxWidth: 400 }}\n            value={model.conversationTitle}\n            onChange={(e) =>\n              setModel({\n                ...model,\n                conversationTitle: e.target.value,\n              })\n            }\n          />\n          <button\n            className={classNames(\"btn btn-dark\", {\n              \"ms-3\": !isMobile,\n              \"ms-0 mt-2\": isMobile,\n            })}\n            onClick={addConversation}\n          >\n            Opprett samtale\n          </button>\n        </Flex>\n      </Modal.Body>\n    </Modal>\n  );\n};\n\nconst ChatConversations = ({\n  model,\n  setModel,\n  conversationsRef,\n  contactsRef,\n  setMessages,\n}) => {\n  return (\n    <div className={classNames(\"border-end pt-0\")} style={{ minWidth: 350 }}>\n      <div className=\"px-3 \">\n        <Flex content=\"space-between\" align=\"center\" className=\"border-bottom \">\n          {model.currentContact && (\n            <>\n              <Contact\n                contact={{\n                  ...model?.currentContact,\n                  name:\n                    model.currentContact?.firstName +\n                    \" \" +\n                    model.currentContact?.lastName,\n                }}\n                inContact\n                isInMyContacts\n              />\n\n              <button\n                className=\"btn bnt-default \"\n                onClick={() =>\n                  setModel({\n                    ...model,\n                    viewConversations: false,\n                    currentContact: null,\n                    conversation: null,\n                  })\n                }\n              >\n                <ArrowBackSVG\n                  className=\"text-muted\"\n                  style={{\n                    width: 24,\n                    height: 24,\n                  }}\n                />\n              </button>\n            </>\n          )}\n        </Flex>\n              <button\n                className=\"btn bnt-default \"\n                onClick={() =>\n                  setModel({\n                    ...model,\n                    viewConversations: false,\n                    currentContact: null,\n                    conversation: null,\n                  })\n                }\n              >\n                <ArrowBackSVG\n                  className=\"text-muted\"\n                  style={{\n                    width: 24,\n                    height: 24,\n                  }}\n                  alt=\"tilbake\"\n                />\n              </button>\n            </>\n          )}\n        </Flex>\n\n        {model.viewConversations && (\n          <>\n            <input\n              type=\"search\"\n              className=\"form-control rounded mb-4\"\n              placeholder=\"Search\"\n              onChange={(e) =>\n                setModel({\n                  ...model,\n                  conversations: conversationsRef.current.filter((x) =>\n                    x.title.toLowerCase().includes(e.target.value.toLowerCase())\n                  ),\n                })\n              }\n            />\n        {model.viewConversations && (\n          <>\n            <input\n              type=\"search\"\n              className=\"form-control rounded mb-4\"\n              placeholder=\"Søk\"\n              onChange={(e) =>\n                setModel({\n                  ...model,\n                  conversations: conversationsRef.current.filter((x) =>\n                    x.title.toLowerCase().includes(e.target.value.toLowerCase())\n                  ),\n                })\n              }\n            />\n\n            <Flex content=\"space-between\" className=\"mb-2 mt-2\">\n              <small className=\"text-muted\">\n                conversations ({model.conversations?.length})\n              </small>\n              <button\n                className=\"btn bnt-default \"\n                style={{ fontSize: 15 }}\n                onClick={() =>\n                  setModel({\n                    ...model,\n                    conversationsModal: true,\n                  })\n                }\n              >\n                <AddCommentSVG\n                  className=\"text-muted\"\n                  style={{\n                    width: 24,\n                    height: 24,\n                  }}\n                />\n              </button>\n            </Flex>\n            <Conversations\n              conversations={model.conversations}\n              currentId={model.conversation?._id}\n              onSelectConversation={(conversation) =>\n                messageApi\n                  .getAllMessagesByConversationId(conversation._id)\n                  .then(({ data }) => {\n                    setModel({\n                      ...model,\n                      fromUser: data.fromUser,\n                      conversation,\n                    });\n            <Flex content=\"space-between\" className=\"mb-2 mt-2\">\n              <small className=\"text-muted\">\n                Samtaler ({model.conversations?.length})\n              </small>\n              <button\n                className=\"btn bnt-default \"\n                style={{ fontSize: 15 }}\n                onClick={() =>\n                  setModel({\n                    ...model,\n                    conversationsModal: true,\n                  })\n                }\n              >\n                <AddCommentSVG\n                  className=\"text-muted\"\n                  style={{\n                    width: 24,\n                    height: 24,\n                  }}\n                  alt=\"start samtale\"\n                />\n              </button>\n            </Flex>\n            <Conversations\n              conversations={model.conversations}\n              currentId={model.conversation?._id}\n              onSelectConversation={(conversation) =>\n                messageApi\n                  .getAllMessagesByConversationId(conversation._id)\n                  .then(({ data }) => {\n                    setModel({\n                      ...model,\n                      fromUser: data.fromUser,\n                      conversation,\n                    });\n\n                    setMessages(\n                      data.messages.map((x) => {\n                        return JSON.stringify(x);\n                      })\n                    );\n                    conversationsRef.current = data.conversations;\n                  })\n                  .catch(() => alert(\"error\"))\n              }\n            />\n          </>\n        )}\n        {!model.viewConversations && (\n          <>\n            <input\n              type=\"search\"\n              className=\"form-control rounded mb-4\"\n              placeholder=\"Search\"\n              onChange={(e) =>\n                setModel({\n                  ...model,\n                  contacts: contactsRef.current.filter((x) =>\n                    x.firstName\n                      .toLowerCase()\n                      .includes(e.target.value.toLowerCase())\n                  ),\n                })\n              }\n            />\n            {model.contacts?.map((x) => (\n              <React.Fragment key={x._id}>\n                <Contact\n                  contact={{\n                    ...x,\n                    name: x.firstName + \" \" + x.lastName,\n                  }}\n                  inContact\n                  isInMyContacts\n                  onSelectContact={(contact) =>\n                    conversationApi\n                      .getAll({\n                        contactId: contact._id,\n                      })\n                      .then(({ data }) => {\n                        setModel({\n                          ...model,\n                          viewConversations: true,\n                          currentContact: contact,\n                          conversations: data.conversations,\n                        });\n                        conversationsRef.current = data.conversations;\n                      })\n                      .catch(() => alert(\"error\"))\n                  }\n                />\n              </React.Fragment>\n            ))}\n          </>\n        )}\n      </div>\n    </div>\n  );\n                    setMessages(\n                      data.messages.map((x) => {\n                        return JSON.stringify(x);\n                      })\n                    );\n                    conversationsRef.current = data.conversations;\n                  })\n                  .catch(() => alert(\"error\"))\n              }\n            />\n          </>\n        )}\n        {!model.viewConversations && (\n          <>\n            <input\n              type=\"search\"\n              className=\"form-control rounded mb-4\"\n              placeholder=\"Søk\"\n              onChange={(e) =>\n                setModel({\n                  ...model,\n                  contacts: contactsRef.current.filter((x) =>\n                    x.firstName\n                      .toLowerCase()\n                      .includes(e.target.value.toLowerCase())\n                  ),\n                })\n              }\n            />\n            {model.contacts?.map((x) => (\n              <React.Fragment key={x._id}>\n                <Contact\n                  contact={{\n                    ...x,\n                    name: x.firstName + \" \" + x.lastName,\n                  }}\n                  inContact\n                  isInMyContacts\n                  onSelectContact={(contact) =>\n                    conversationApi\n                      .getAll({\n                        contactId: contact._id,\n                      })\n                      .then(({ data }) => {\n                        setModel({\n                          ...model,\n                          viewConversations: true,\n                          currentContact: contact,\n                          conversations: data.conversations,\n                        });\n                        conversationsRef.current = data.conversations;\n                      })\n                      .catch(() => alert(\"error\"))\n                  }\n                />\n              </React.Fragment>\n            ))}\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n",[],"/Users/eier/Library/Mobile Documents/com~apple~CloudDocs/Documents/Dataingeniør/DATA3900 Bacheloroppgave/bachelor-metchat/client/src/main/interests.jsx",["251"],[],"/Users/eier/Library/Mobile Documents/com~apple~CloudDocs/Documents/Dataingeniør/DATA3900 Bacheloroppgave/bachelor-metchat/client/src/api/config.js",["252","253"],[],"/Users/eier/Library/Mobile Documents/com~apple~CloudDocs/Documents/Dataingeniør/DATA3900 Bacheloroppgave/bachelor-metchat/client/src/APIRoutes.js",[],[],"/Users/eier/Library/Mobile Documents/com~apple~CloudDocs/Documents/Dataingeniør/DATA3900 Bacheloroppgave/bachelor-metchat/client/src/api/contact-api.js",[],[],"/Users/eier/Library/Mobile Documents/com~apple~CloudDocs/Documents/Dataingeniør/DATA3900 Bacheloroppgave/bachelor-metchat/client/src/api/profile-api.js",[],[],"/Users/eier/Library/Mobile Documents/com~apple~CloudDocs/Documents/Dataingeniør/DATA3900 Bacheloroppgave/bachelor-metchat/client/src/api/user-interest-api.js",[],[],"/Users/eier/Library/Mobile Documents/com~apple~CloudDocs/Documents/Dataingeniør/DATA3900 Bacheloroppgave/bachelor-metchat/client/src/api/conversation-api.js",[],[],"/Users/eier/Library/Mobile Documents/com~apple~CloudDocs/Documents/Dataingeniør/DATA3900 Bacheloroppgave/bachelor-metchat/client/src/api/message-api.js",[],[],"/Users/eier/Library/Mobile Documents/com~apple~CloudDocs/Documents/Dataingeniør/DATA3900 Bacheloroppgave/bachelor-metchat/client/src/components/Flex.tsx",[],[],"/Users/eier/Library/Mobile Documents/com~apple~CloudDocs/Documents/Dataingeniør/DATA3900 Bacheloroppgave/bachelor-metchat/client/src/components/logo.js",[],[],"/Users/eier/Library/Mobile Documents/com~apple~CloudDocs/Documents/Dataingeniør/DATA3900 Bacheloroppgave/bachelor-metchat/client/src/main/chat/WebSocketClient.js",[],[],"/Users/eier/Library/Mobile Documents/com~apple~CloudDocs/Documents/Dataingeniør/DATA3900 Bacheloroppgave/bachelor-metchat/client/src/components/AdminNav.jsx",[],[],"/Users/eier/Library/Mobile Documents/com~apple~CloudDocs/Documents/Dataingeniør/DATA3900 Bacheloroppgave/bachelor-metchat/client/src/components/contact.jsx",[],[],"/Users/eier/Library/Mobile Documents/com~apple~CloudDocs/Documents/Dataingeniør/DATA3900 Bacheloroppgave/bachelor-metchat/client/src/assets/icons/ArrowBack.tsx",[],[],"/Users/eier/Library/Mobile Documents/com~apple~CloudDocs/Documents/Dataingeniør/DATA3900 Bacheloroppgave/bachelor-metchat/client/src/components/MainNav.jsx",[],[],"/Users/eier/Library/Mobile Documents/com~apple~CloudDocs/Documents/Dataingeniør/DATA3900 Bacheloroppgave/bachelor-metchat/client/src/assets/icons/AddComment.tsx",[],[],"/Users/eier/Library/Mobile Documents/com~apple~CloudDocs/Documents/Dataingeniør/DATA3900 Bacheloroppgave/bachelor-metchat/client/src/components/Register.jsx",[],[],"/Users/eier/Library/Mobile Documents/com~apple~CloudDocs/Documents/Dataingeniør/DATA3900 Bacheloroppgave/bachelor-metchat/client/src/components/login.jsx",[],[],"/Users/eier/Library/Mobile Documents/com~apple~CloudDocs/Documents/Dataingeniør/DATA3900 Bacheloroppgave/bachelor-metchat/client/src/components/loading.jsx",[],[],"/Users/eier/Library/Mobile Documents/com~apple~CloudDocs/Documents/Dataingeniør/DATA3900 Bacheloroppgave/bachelor-metchat/client/src/components/nav.jsx",["254"],[],"/Users/eier/Library/Mobile Documents/com~apple~CloudDocs/Documents/Dataingeniør/DATA3900 Bacheloroppgave/bachelor-metchat/client/src/components/use-query.jsx",[],[],"/Users/eier/Library/Mobile Documents/com~apple~CloudDocs/Documents/Dataingeniør/DATA3900 Bacheloroppgave/bachelor-metchat/client/src/components/interesser.jsx",[],[],"/Users/eier/Library/Mobile Documents/com~apple~CloudDocs/Documents/Dataingeniør/DATA3900 Bacheloroppgave/bachelor-metchat/client/src/components/conversations.jsx",[],[],"/Users/eier/Library/Mobile Documents/com~apple~CloudDocs/Documents/Dataingeniør/DATA3900 Bacheloroppgave/bachelor-metchat/client/src/assets/icons/Delete.jsx",[],[],"/Users/eier/Library/Mobile Documents/com~apple~CloudDocs/Documents/Dataingeniør/DATA3900 Bacheloroppgave/bachelor-metchat/client/src/assets/icons/Profile.jsx",[],[],"/Users/eier/Library/Mobile Documents/com~apple~CloudDocs/Documents/Dataingeniør/DATA3900 Bacheloroppgave/bachelor-metchat/client/src/assets/img/avatars/index.js",[],[],"/Users/eier/Library/Mobile Documents/com~apple~CloudDocs/Documents/Dataingeniør/DATA3900 Bacheloroppgave/bachelor-metchat/client/src/components/footer.jsx",[],[],{"ruleId":"255","severity":1,"message":"256","line":106,"column":8,"nodeType":"257","endLine":106,"endColumn":22,"suggestions":"258"},{"ruleId":"259","severity":1,"message":"260","line":37,"column":30,"nodeType":"261","messageId":"262","endLine":37,"endColumn":32},{"ruleId":"259","severity":1,"message":"260","line":37,"column":53,"nodeType":"261","messageId":"262","endLine":37,"endColumn":55},{"ruleId":"259","severity":1,"message":"260","line":37,"column":76,"nodeType":"261","messageId":"262","endLine":37,"endColumn":78},{"ruleId":"259","severity":1,"message":"260","line":37,"column":99,"nodeType":"261","messageId":"262","endLine":37,"endColumn":101},{"ruleId":"259","severity":1,"message":"260","line":38,"column":30,"nodeType":"261","messageId":"262","endLine":38,"endColumn":32},{"ruleId":"259","severity":1,"message":"260","line":38,"column":53,"nodeType":"261","messageId":"262","endLine":38,"endColumn":55},{"ruleId":"259","severity":1,"message":"260","line":38,"column":76,"nodeType":"261","messageId":"262","endLine":38,"endColumn":78},{"ruleId":"259","severity":1,"message":"260","line":39,"column":30,"nodeType":"261","messageId":"262","endLine":39,"endColumn":32},{"ruleId":"259","severity":1,"message":"260","line":39,"column":53,"nodeType":"261","messageId":"262","endLine":39,"endColumn":55},{"ruleId":"259","severity":1,"message":"260","line":40,"column":30,"nodeType":"261","messageId":"262","endLine":40,"endColumn":32},{"ruleId":"255","severity":1,"message":"263","line":16,"column":6,"nodeType":"257","endLine":16,"endColumn":8,"suggestions":"264"},{"ruleId":"265","severity":1,"message":"266","line":6,"column":9,"nodeType":"267","messageId":"268","endLine":6,"endColumn":16},{"ruleId":"265","severity":1,"message":"269","line":9,"column":10,"nodeType":"267","messageId":"268","endLine":9,"endColumn":14},{"ruleId":"270","severity":1,"message":"271","line":19,"column":11,"nodeType":"272","endLine":19,"endColumn":47},{"ruleId":"270","severity":1,"message":"271","line":20,"column":11,"nodeType":"272","endLine":20,"endColumn":46},{"ruleId":"270","severity":1,"message":"271","line":52,"column":9,"nodeType":"272","endLine":52,"endColumn":45},{"ruleId":"270","severity":1,"message":"271","line":54,"column":11,"nodeType":"272","endLine":54,"endColumn":50},{"ruleId":"270","severity":1,"message":"271","line":66,"column":9,"nodeType":"272","endLine":66,"endColumn":47},{"ruleId":"265","severity":1,"message":"273","line":11,"column":6,"nodeType":"267","messageId":"268","endLine":11,"endColumn":14},{"ruleId":"265","severity":1,"message":"274","line":35,"column":18,"nodeType":"267","messageId":"268","endLine":35,"endColumn":27},{"ruleId":"275","severity":1,"message":"276","line":106,"column":13,"nodeType":"272","endLine":106,"endColumn":24},{"ruleId":"275","severity":1,"message":"276","line":115,"column":9,"nodeType":"272","endLine":115,"endColumn":20},{"ruleId":"277","severity":2,"message":"278","line":20,"column":18,"nodeType":"267","messageId":"279","endLine":20,"endColumn":31},{"ruleId":"255","severity":1,"message":"280","line":36,"column":6,"nodeType":"257","endLine":36,"endColumn":17,"suggestions":"281"},{"ruleId":"255","severity":1,"message":"280","line":48,"column":6,"nodeType":"257","endLine":48,"endColumn":17,"suggestions":"282"},{"ruleId":null,"fatal":true,"severity":2,"message":"283","line":301,"column":18},{"ruleId":"255","severity":1,"message":"280","line":25,"column":6,"nodeType":"257","endLine":25,"endColumn":8,"suggestions":"284"},{"ruleId":"285","severity":1,"message":"286","line":1,"column":34,"nodeType":"261","messageId":"287","endLine":1,"endColumn":35},{"ruleId":"285","severity":1,"message":"286","line":2,"column":32,"nodeType":"261","messageId":"287","endLine":2,"endColumn":33},{"ruleId":"275","severity":1,"message":"276","line":33,"column":11,"nodeType":"272","endLine":33,"endColumn":22},"react-hooks/exhaustive-deps","React Hook useEffect has an unnecessary dependency: 'api'. Either exclude it or remove the dependency array. Outer scope values like 'api' aren't valid dependencies because mutating them doesn't re-render the component.","ArrayExpression",["288"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has a missing dependency: 'account'. Either include it or remove the dependency array.",["289"],"no-unused-vars","'account' is assigned a value but never used.","Identifier","unusedVar","'Link' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'userName' is assigned a value but never used.","'interests' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","no-undef","'useScreenSize' is not defined.","undef","React Hook useEffect has a missing dependency: 'model'. Either include it or remove the dependency array. You can also do a functional update 'setModel(m => ...)' if you only need 'model' in the 'setModel' call.",["290"],["291"],"Parsing error: Expected corresponding JSX closing tag for <Flex>. (301:18)",["292"],"no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat",{"desc":"293","fix":"294"},{"desc":"293","fix":"295"},{"desc":"296","fix":"297"},{"desc":"296","fix":"298"},{"desc":"299","fix":"300"},"Update the dependencies array to be: [account]",{"range":"301","text":"302"},{"range":"303","text":"302"},"Update the dependencies array to be: [contactId, model]",{"range":"304","text":"305"},{"range":"306","text":"305"},"Update the dependencies array to be: [model]",{"range":"307","text":"308"},[3704,3718],"[account]",[481,483],[1196,1207],"[contactId, model]",[1480,1491],[931,933],"[model]"]