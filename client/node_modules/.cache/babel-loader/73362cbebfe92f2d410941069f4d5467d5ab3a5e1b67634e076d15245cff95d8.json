{"ast":null,"code":"var _jsxFileName = \"/Users/eier/Library/Mobile Documents/com~apple~CloudDocs/Documents/Dataingeni\\xF8r/DATA3900 Bacheloroppgave/bachelor-metchat/client/src/components/login.jsx\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport axios from \"axios\";\nimport \"../home.css\";\nimport { authenticationRoute } from \"../APIRoutes\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Login() {\n  _s();\n  // Initializes a navigate constant using the useNavigate hook from the React Router library.\n  // This hook provides a way to navigate between pages within a single-page application.\n  const navigate = useNavigate();\n\n  // Initializes a state using the useState hook from React.\n  const [values, setValues] = useState({\n    email: \"\",\n    password: \"\"\n  });\n\n  // The useEffect hook is used to check if there is an existing user logged in.\n  // If there is, the page is redirected to the home page (\"/\").\n  useEffect(() => {\n    // \"metchat-user\"?\n    if (localStorage.getItem(\"metchat-user\")) {\n      navigate(\"/\");\n    }\n  }, [navigate]);\n\n  // The handleChange function is called when the user enters their email or password.\n  // It updates the values state with the new values.\n  const handleChange = e => {\n    setValues({\n      ...values,\n      [e.target.name]: e.target.value\n    });\n  };\n\n  // The handleValidation function is called when the user submits the form.\n  //It checks if both the email and password fields are filled.\n  // If not, an alert is displayed asking the user to fill in the required fields.\n  //This function returns a boolean value indicating whether the validation was successful or not.\n  const handleValidation = () => {\n    const {\n      email,\n      password\n    } = values;\n    if (email === \"\" || password === \"\") {\n      alert(\"Fyll inn feltene.\");\n      return false;\n    }\n    return true;\n  };\n\n  //  handleSubmit function is called when the user submits the form.\n  // First, the default action of refreshing the page is prevented.\n  // Then sends a POST request to the server with the user's email and password.\n  // If the validation is successful, and the server returns a successful response, the user's details are saved in localStorage, an alert message is displayed, and the page is redirected to the home page.\n  const handleSubmit = async e => {\n    e.preventDefault(); // prevents the page form refreshing or moving to another url.\n    console.log(\"email\", values.email);\n    console.log(\"password\", values.password);\n    if (handleValidation()) {\n      const {\n        email,\n        password\n      } = values;\n      const {\n        data\n      } = await axios.post(`${authenticationRoute}/login`, {\n        email,\n        password\n      });\n      if (data.status === false) {\n        alert(data.msg);\n      } else if (data.status === true) {\n        localStorage.setItem(\"metchat-user\", JSON.stringify(data.user));\n        alert(\"Logged in\");\n        navigate(\"/\"); // add navigation to contacts?\n      }\n    }\n  };\n\n  // The return statement returns the JSX code that defines the login form.\n  // When the user enters their email or password, the handleChange function is called to update the values state with the new values.\n  // When the user submits the form, the handleSubmit function is called to validate the input and send a request to the server.\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"content active inactive\",\n    id: \"log_in\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      id: \"form_log\",\n      onSubmit: e => handleSubmit(e),\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-row\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Epost\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          required: true,\n          id: \"email_log\",\n          name: \"email\",\n          onInput: e => handleChange(e)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-row\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Passord\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          required: true,\n          id: \"password_log\",\n          name: \"password\",\n          onInput: e => handleChange(e)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-row\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"chang-color\",\n          children: \"Husk meg\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"btn\",\n        children: \"Logg Inn\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n}\n_s(Login, \"wLcpOfqbiH23GoIrK829A8xnJ5k=\", false, function () {\n  return [useNavigate];\n});\n_c = Login;\nexport default Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["useState","useEffect","useNavigate","axios","authenticationRoute","Login","navigate","values","setValues","email","password","localStorage","getItem","handleChange","e","target","name","value","handleValidation","alert","handleSubmit","preventDefault","console","log","data","post","status","msg","setItem","JSON","stringify","user"],"sources":["/Users/eier/Library/Mobile Documents/com~apple~CloudDocs/Documents/DataingeniÃ¸r/DATA3900 Bacheloroppgave/bachelor-metchat/client/src/components/login.jsx"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport axios from \"axios\";\nimport \"../home.css\";\nimport { authenticationRoute } from \"../APIRoutes\";\n\nfunction Login() {\n  // Initializes a navigate constant using the useNavigate hook from the React Router library.\n  // This hook provides a way to navigate between pages within a single-page application.\n  const navigate = useNavigate();\n\n  // Initializes a state using the useState hook from React.\n  const [values, setValues] = useState({\n    email: \"\",\n    password: \"\",\n  });\n\n  // The useEffect hook is used to check if there is an existing user logged in.\n  // If there is, the page is redirected to the home page (\"/\").\n  useEffect(() => {\n    // \"metchat-user\"?\n    if (localStorage.getItem(\"metchat-user\")) {\n      navigate(\"/\");\n    }\n  }, [navigate]);\n\n  // The handleChange function is called when the user enters their email or password.\n  // It updates the values state with the new values.\n  const handleChange = (e) => {\n    setValues({ ...values, [e.target.name]: e.target.value });\n  };\n\n  // The handleValidation function is called when the user submits the form.\n  //It checks if both the email and password fields are filled.\n  // If not, an alert is displayed asking the user to fill in the required fields.\n  //This function returns a boolean value indicating whether the validation was successful or not.\n  const handleValidation = () => {\n    const { email, password } = values;\n    if (email === \"\" || password === \"\") {\n      alert(\"Fyll inn feltene.\");\n      return false;\n    }\n    return true;\n  };\n\n  //  handleSubmit function is called when the user submits the form.\n  // First, the default action of refreshing the page is prevented.\n  // Then sends a POST request to the server with the user's email and password.\n  // If the validation is successful, and the server returns a successful response, the user's details are saved in localStorage, an alert message is displayed, and the page is redirected to the home page.\n  const handleSubmit = async (e) => {\n    e.preventDefault(); // prevents the page form refreshing or moving to another url.\n    console.log(\"email\", values.email);\n    console.log(\"password\", values.password);\n\n    if (handleValidation()) {\n      const { email, password } = values;\n      const { data } = await axios.post(`${authenticationRoute}/login`, {\n        email,\n        password,\n      });\n\n      if (data.status === false) {\n        alert(data.msg);\n      } else if (data.status === true) {\n        localStorage.setItem(\"metchat-user\", JSON.stringify(data.user));\n        alert(\"Logged in\");\n        navigate(\"/\"); // add navigation to contacts?\n      }\n    }\n  };\n\n  // The return statement returns the JSX code that defines the login form.\n  // When the user enters their email or password, the handleChange function is called to update the values state with the new values.\n  // When the user submits the form, the handleSubmit function is called to validate the input and send a request to the server.\n  return (\n    <div className=\"content active inactive\" id=\"log_in\">\n      <form id=\"form_log\" onSubmit={(e) => handleSubmit(e)}>\n        <div className=\"form-row\">\n          <label>Epost</label>\n          <input\n            type=\"text\"\n            required\n            id=\"email_log\"\n            name=\"email\"\n            onInput={(e) => handleChange(e)}\n          />\n        </div>\n        <div className=\"form-row\">\n          <label>Passord</label>\n          <input\n            type=\"password\"\n            required\n            id=\"password_log\"\n            name=\"password\"\n            onInput={(e) => handleChange(e)}\n          />\n        </div>\n        <div className=\"form-row\">\n          <input type=\"checkbox\" />\n          <label className=\"chang-color\">Husk meg</label>\n        </div>\n        <button type=\"submit\" className=\"btn\">\n          Logg Inn\n        </button>\n      </form>\n    </div>\n  );\n}\n\nexport default Login;\n"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAO,aAAa;AACpB,SAASC,mBAAmB,QAAQ,cAAc;AAAC;AAEnD,SAASC,KAAK,GAAG;EAAA;EACf;EACA;EACA,MAAMC,QAAQ,GAAGJ,WAAW,EAAE;;EAE9B;EACA,MAAM,CAACK,MAAM,EAAEC,SAAS,CAAC,GAAGR,QAAQ,CAAC;IACnCS,KAAK,EAAE,EAAE;IACTC,QAAQ,EAAE;EACZ,CAAC,CAAC;;EAEF;EACA;EACAT,SAAS,CAAC,MAAM;IACd;IACA,IAAIU,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC,EAAE;MACxCN,QAAQ,CAAC,GAAG,CAAC;IACf;EACF,CAAC,EAAE,CAACA,QAAQ,CAAC,CAAC;;EAEd;EACA;EACA,MAAMO,YAAY,GAAIC,CAAC,IAAK;IAC1BN,SAAS,CAAC;MAAE,GAAGD,MAAM;MAAE,CAACO,CAAC,CAACC,MAAM,CAACC,IAAI,GAAGF,CAAC,CAACC,MAAM,CAACE;IAAM,CAAC,CAAC;EAC3D,CAAC;;EAED;EACA;EACA;EACA;EACA,MAAMC,gBAAgB,GAAG,MAAM;IAC7B,MAAM;MAAET,KAAK;MAAEC;IAAS,CAAC,GAAGH,MAAM;IAClC,IAAIE,KAAK,KAAK,EAAE,IAAIC,QAAQ,KAAK,EAAE,EAAE;MACnCS,KAAK,CAAC,mBAAmB,CAAC;MAC1B,OAAO,KAAK;IACd;IACA,OAAO,IAAI;EACb,CAAC;;EAED;EACA;EACA;EACA;EACA,MAAMC,YAAY,GAAG,MAAON,CAAC,IAAK;IAChCA,CAAC,CAACO,cAAc,EAAE,CAAC,CAAC;IACpBC,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEhB,MAAM,CAACE,KAAK,CAAC;IAClCa,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEhB,MAAM,CAACG,QAAQ,CAAC;IAExC,IAAIQ,gBAAgB,EAAE,EAAE;MACtB,MAAM;QAAET,KAAK;QAAEC;MAAS,CAAC,GAAGH,MAAM;MAClC,MAAM;QAAEiB;MAAK,CAAC,GAAG,MAAMrB,KAAK,CAACsB,IAAI,CAAE,GAAErB,mBAAoB,QAAO,EAAE;QAChEK,KAAK;QACLC;MACF,CAAC,CAAC;MAEF,IAAIc,IAAI,CAACE,MAAM,KAAK,KAAK,EAAE;QACzBP,KAAK,CAACK,IAAI,CAACG,GAAG,CAAC;MACjB,CAAC,MAAM,IAAIH,IAAI,CAACE,MAAM,KAAK,IAAI,EAAE;QAC/Bf,YAAY,CAACiB,OAAO,CAAC,cAAc,EAAEC,IAAI,CAACC,SAAS,CAACN,IAAI,CAACO,IAAI,CAAC,CAAC;QAC/DZ,KAAK,CAAC,WAAW,CAAC;QAClBb,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC;MACjB;IACF;EACF,CAAC;;EAED;EACA;EACA;EACA,oBACE;IAAK,SAAS,EAAC,yBAAyB;IAAC,EAAE,EAAC,QAAQ;IAAA,uBAClD;MAAM,EAAE,EAAC,UAAU;MAAC,QAAQ,EAAGQ,CAAC,IAAKM,YAAY,CAACN,CAAC,CAAE;MAAA,wBACnD;QAAK,SAAS,EAAC,UAAU;QAAA,wBACvB;UAAA,UAAO;QAAK;UAAA;UAAA;UAAA;QAAA,QAAQ,eACpB;UACE,IAAI,EAAC,MAAM;UACX,QAAQ;UACR,EAAE,EAAC,WAAW;UACd,IAAI,EAAC,OAAO;UACZ,OAAO,EAAGA,CAAC,IAAKD,YAAY,CAACC,CAAC;QAAE;UAAA;UAAA;UAAA;QAAA,QAChC;MAAA;QAAA;QAAA;QAAA;MAAA,QACE,eACN;QAAK,SAAS,EAAC,UAAU;QAAA,wBACvB;UAAA,UAAO;QAAO;UAAA;UAAA;UAAA;QAAA,QAAQ,eACtB;UACE,IAAI,EAAC,UAAU;UACf,QAAQ;UACR,EAAE,EAAC,cAAc;UACjB,IAAI,EAAC,UAAU;UACf,OAAO,EAAGA,CAAC,IAAKD,YAAY,CAACC,CAAC;QAAE;UAAA;UAAA;UAAA;QAAA,QAChC;MAAA;QAAA;QAAA;QAAA;MAAA,QACE,eACN;QAAK,SAAS,EAAC,UAAU;QAAA,wBACvB;UAAO,IAAI,EAAC;QAAU;UAAA;UAAA;UAAA;QAAA,QAAG,eACzB;UAAO,SAAS,EAAC,aAAa;UAAA,UAAC;QAAQ;UAAA;UAAA;UAAA;QAAA,QAAQ;MAAA;QAAA;QAAA;QAAA;MAAA,QAC3C,eACN;QAAQ,IAAI,EAAC,QAAQ;QAAC,SAAS,EAAC,KAAK;QAAA,UAAC;MAEtC;QAAA;QAAA;QAAA;MAAA,QAAS;IAAA;MAAA;MAAA;MAAA;IAAA;EACJ;IAAA;IAAA;IAAA;EAAA,QACH;AAEV;AAAC,GArGQT,KAAK;EAAA,QAGKH,WAAW;AAAA;AAAA,KAHrBG,KAAK;AAuGd,eAAeA,KAAK;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}